AOP : 응집도를 높이는 기술, 반복되는 코드의 응집도를 높여서 적용.
	- 매서드가 작동될 때 Advice 클래스에 저장된 메서드가 실행 (Before, After...)
	- 로그 처리, 예외처리, 트랜잭션 처리 <= 모든 메서드가 실행될 때마다 코딩해야 하는 부분
	
- Advice : 반복되는 코드를 저장하고 있는 클래스 
- 핵심관심 (Core Concerns) : 메서드가 가지고 있는 실제 비즈니스 로직
- 횡단 관심(Crosscutting Concerns) : 공통의 기능을 처리하는 로직 (로그, 예외처리, 트랜잭션 처리)

- 조인 포인트 : AOP가 호출하는 비즈니스 메서드 (예 BoardServiceImpl, UserServiceImpl의 메서드들)

- 포인트컷 : 필터링된 조인포인트 (AOP 적용될 메서드를 필터링 설정)
	: 공통 기능을 사용하기 위해서 포인트컷 필요
	expression="execution(* com.springbook.biz..*Impl.*(..))"
		* : 리턴타입
		com.springbook.biz. : 패키지 경로
		.*Impl : 클래스명(*Impl : Impl로 끝나는 클래스에 적용)
		.*(..) : 메서드명, *: 모든 메서드, (..) : 모든 매개변수 

	execution(* com.springbook.biz..*Impl.*get*(..)"
		.*Impl.*get : 클래스명(*Impl.*get : Impl로 끝나는 클래스중에 get으로 시작하는 메서드에만 적용)
	
	
	
	*OOP (객체 지향 프로그래밍) : 완전하게 핵심관심과, 횡단관심을 분리하기 어렵다.
			Spring에서는 핵심관심과 횡단관심을 완전하게 분리해서 구현하기가 용이하다
	advice : 각 조인 포이트에 삽입되어 동작할 횡단 관심에 해당하는 공통기능이 적용된 메서드(기능)
	
	advice의 동작시점 :
		- Before 		: 비즈니스 메서드 실행전 실행
		- After
			After-Returning : 메서드가 성공적으로 리턴되면 작동
			After-Throwing : 예외가 발생되면 작동
			After : 비즈니스 메서드 실행 후 실행
		- Around : 비즈니스 메서드 실행 전 후 작동됨
	
	Join포인트와 바인드 변수
		- JoinPoint (인터페이스) : 정의된 메서드를 사용하면 AOP에서 다양한 정보를 알아 올 수 있다.
		- Signature getSignature() : 클라이언트가 호출한 메서드의 시그니처 정보가 저장된 Signature
		- Obeject get Target() : 클라이언트가 호출한 비즈니스 메서드를 포함하는 객체 리턴
		- Object [] getArgs() : 클라이언트가 메서드를 호출할 때 넘겨준 인사 목록으로 Object 배열로 리턴
	
	Before, After-Returning, After-Throwing, After <= JoinPoint를 사용
	Around <= ProceedingJoinPoint를 매개변수로 사용해야 함
	
	getSignature() 메서드를 사용하면 다양한 정보를 알 수 있다.
		-String getName() : 클라이언트가 호출한 메서드 이름을 리턴
		- String toLongString() : 클라이언트가 호출한 메서드의 리턴타입, 이름, 매개변수를 패키지 경로까지 포함하여 리턴
		- String toShortString(): 클라이언트가 호출한 메서드 시그니처를 축약한 문자열로 리턴
	
	1.  AOP 라이브러리 등록 (poem.xml)
		<!-- AOP 라이브러리 추가 시작-->
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjrt</artifactId>
			<version>${org.aspect-version}</version>
		</dependency>
		<dependency>
			<groupId>org.aspectj</groupId>
			<artifactId>aspectjweaver</artifactId>
			<version>1.8.8</version>
		</dependency>
		<!-- AOP 라이브러리 추가 시작-->
	
	2. AOP (applicationContext.xml)
	- NameSpace에서 추가
	
	aop:before 메서드 실행전
	aop:around 앞 뒤로 
	
	---------------------------
	
	어노테이션 기반 AOP
	
	1. Bean 설정 파일에서 구성 (applicationContext.xml)
	<!-- AOP 어노테이션을 검색할 수 있도록 설정 -->
	 <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	 
	2. Advice 클래스에서 어노테이션 사용
	  @Service
	  @Aspect
	  
	  @Pointcut("execution ( * com.springbook.biz..*Impl.*(..))")  // 메서드 위에 
	  public void allPointCut() {}  // 포인트컷 이름만 적용하는 메서드 생성
	  
	3. Advice 시작 어노테이션들 (Advice 메서드 위에 설정함, 포인트컷이 등록되어야 함)
				 @Before("allPointCut()")  // 메서드 위에
					public void printLog() {
						System.out.println("[공통로그] 비즈니스 로직 수행 전 동작(AOP설정에서 작동)");
					}
		- @Before ("포인트컷메서드()")
		- @AfterReturning
		- @AfterThrowing
		- @After
		- @Around
 